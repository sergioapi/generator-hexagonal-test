package es.example.lineafacturas.adapters.rest;

import es.example.lineafacturas.models.LineaFactura;
import es.example.lineafacturas.ports.driving.LineaFacturaUseCase;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

// Autogenerated LineaFactura Controller class.

@RestController
@RequestMapping("/lineaFacturas")
@RequiredArgsConstructor
public class LineaFacturaController {

    private final LineaFacturaUseCase lineaFacturaUseCase;

    @PostMapping
    public ResponseEntity<LineaFactura> createLineaFactura(@RequestBody LineaFactura lineaFactura) {
        return ResponseEntity.ok(lineaFacturaUseCase.createLineaFactura(lineaFactura));
    }

    @PutMapping("{lineaFacturaId}")
    public ResponseEntity<LineaFactura> updateLineaFactura(@PathVariable Long lineaFacturaId, @RequestBody LineaFactura updateLineaFactura) {
        return Optional.ofNullable(lineaFacturaUseCase.updateLineaFactura(lineaFacturaId, updateLineaFactura))
                .map(lineaFactura -> new ResponseEntity<>(lineaFactura, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @DeleteMapping("{lineaFacturaId}")
    public ResponseEntity<Void> deleteLineaFactura(@PathVariable Long lineaFacturaId) {
        if (!lineaFacturaUseCase.deleteLineaFactura(lineaFacturaId)) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @GetMapping
    public ResponseEntity<List<LineaFactura>> getAllLineaFacturas() {
        return ResponseEntity.ok(lineaFacturaUseCase.getAllLineaFacturas());
    }

    @GetMapping("{lineaFacturaId}")
    public ResponseEntity<LineaFactura> getLineaFacturaById(@PathVariable Long lineaFacturaId) {
        return Optional.ofNullable(lineaFacturaUseCase.getLineaFactura(lineaFacturaId))
                .map(lineaFactura -> new ResponseEntity<>(lineaFactura, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

}
