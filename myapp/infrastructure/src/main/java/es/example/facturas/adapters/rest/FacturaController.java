package es.example.facturas.adapters.rest;

import es.example.facturas.models.Factura;
import es.example.facturas.ports.driving.FacturaUseCase;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

// Autogenerated Factura Controller class.

@RestController
@RequestMapping("/facturas")
@RequiredArgsConstructor
public class FacturaController {

    private final FacturaUseCase facturaUseCase;

    @PostMapping
    public ResponseEntity<Factura> createFactura(@RequestBody Factura factura) {
        return ResponseEntity.ok(facturaUseCase.createFactura(factura));
    }

    @PutMapping("{facturaId}")
    public ResponseEntity<Factura> updateFactura(@PathVariable Long facturaId, @RequestBody Factura updateFactura) {
        return Optional.ofNullable(facturaUseCase.updateFactura(facturaId, updateFactura))
                .map(factura -> new ResponseEntity<>(factura, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @DeleteMapping("{facturaId}")
    public ResponseEntity<Void> deleteFactura(@PathVariable Long facturaId) {
        if (!facturaUseCase.deleteFactura(facturaId)) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @GetMapping
    public ResponseEntity<List<Factura>> getAllFacturas() {
        return ResponseEntity.ok(facturaUseCase.getAllFacturas());
    }

    @GetMapping("{facturaId}")
    public ResponseEntity<Factura> getFacturaById(@PathVariable Long facturaId) {
        return Optional.ofNullable(facturaUseCase.getFactura(facturaId))
                .map(factura -> new ResponseEntity<>(factura, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

}
