package <%= groupID %>;

import <%=pathModel%>.<%=entityName%>;
import <%=pathUseCase%>.<%=entityName%>UseCase;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

// Autogenerated <%=entityName%> Controller class.

@RestController
@RequestMapping("/<%=entityVarName%>s")
@AllArgsConstructor
public class <%=entityName%>Controller {

    private final <%=entityName%>UseCase <%=entityVarName%>UseCase;

    @PostMapping
    public ResponseEntity<<%=entityName%>> create<%=entityName%>(@RequestBody <%=entityName%> <%=entityVarName%>) {
        return ResponseEntity.ok(<%=entityVarName%>UseCase.create<%=entityName%>(<%=entityVarName%>));
    }

    @PutMapping("{<%=entityVarName%>Id}")
    public ResponseEntity<<%=entityName%>> update<%=entityName%>(@PathVariable Long <%=entityVarName%>Id, @RequestBody <%=entityName%> update<%=entityName%>) {
        return Optional.ofNullable(<%=entityVarName%>UseCase.update<%=entityName%>(<%=entityVarName%>Id, update<%=entityName%>))
                .map(<%=entityVarName%> -> new ResponseEntity<>(<%=entityVarName%>, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @DeleteMapping("{<%=entityVarName%>Id}")
    public ResponseEntity<Void> delete<%=entityName%>(@PathVariable Long <%=entityVarName%>Id) {
        if (!<%=entityVarName%>UseCase.delete<%=entityName%>(<%=entityVarName%>Id)) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @GetMapping
    public ResponseEntity<List<<%=entityName%>>> getAll<%=entityName%>s() {
        return ResponseEntity.ok(<%=entityVarName%>UseCase.getAll<%=entityName%>s());
    }

    @GetMapping("{<%=entityVarName%>Id}")
    public ResponseEntity<<%=entityName%>> get<%=entityName%>ById(@PathVariable Long <%=entityVarName%>Id) {
        return Optional.ofNullable(<%=entityVarName%>UseCase.get<%=entityName%>(<%=entityVarName%>Id))
                .map(<%=entityVarName%> -> new ResponseEntity<>(<%=entityVarName%>, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

}
